import pytest
import requests
import re

from traceroute.traceroute import validate_api_token


@pytest.fixture
def invalid_api_token():
    return "completely-invalid-api-token"


@pytest.fixture
def valid_api_token():
    return "completely-valid-api-token"


def test_api_token_validity(mocker, valid_api_token, invalid_api_token):
    successful_mock_response = mocker.Mock()
    successful_mock_response.status_code = 200

    failed_mock_response = mocker.Mock()
    failed_mock_response.status_code = 403

    def mock_get(url: str):
        if not url.startswith("https://ipinfo.io/"):
            return failed_mock_response

        parameters = url.lstrip("https://ipinfo.io/").split("?token=")
        if not len(parameters) == 2:
            return failed_mock_response

        ip_address, api_token = parameters

        if re.fullmatch(r"(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]?|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]?|[1-9]?[0-9])", ip_address) is None:
            return failed_mock_response

        if api_token not in [valid_api_token, ""]:
            return failed_mock_response

        return successful_mock_response

    mocker.patch("requests.get", mock_get)

    validate_api_token(valid_api_token)
    validate_api_token("")

    with pytest.raises(ValueError) as exception_information:
        validate_api_token(invalid_api_token)

    assert str(exception_information.value) == "Invalid API token!"
