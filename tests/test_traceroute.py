import pytest
import re

from traceroute.traceroute import validate_api_token


@pytest.fixture
def invalid_api_token():
    return "completely-invalid-api-token"


@pytest.fixture
def valid_api_token():
    return "completely-valid-api-token"


@pytest.fixture
def mock_requests_get(mocker, valid_api_token, invalid_api_token):
    non_bogon_payload = {"ip": "valid-ip-address", "hostname": "valid-hostname", "city": "valid-city", "region": "valid-region", "country": "valid-country"}
    bogon_payload = {"ip": "reserved-ip-address", "bogon": "true"}
    failed_payload_due_to_ip_address = {"status": 404, "error": {"title": "Wrong ip", "message": "Please provide a valid IP address"}}
    failed_payload_due_to_api_token = {"status": 403, "error": {"title": "Unknown token",
                                                                "message": "Please ensure you've entered your token correctly. Refer to https://ipinfo.io/developers for details, or contact us at support@ipinfo.io for help"}}

    successful_non_bogon_response = mocker.Mock()
    successful_non_bogon_response.status_code = 200
    successful_non_bogon_response.json.side_effect = [non_bogon_payload]

    successful_bogon_response = mocker.Mock()
    successful_bogon_response.status_code = 200
    successful_bogon_response.json.side_effect = [bogon_payload]

    failed_response_due_to_ip_address = mocker.Mock()
    failed_response_due_to_ip_address.status_code = 404
    failed_response_due_to_ip_address.json.side_effect = [failed_payload_due_to_ip_address]

    failed_response_due_to_api_token = mocker.Mock()
    failed_response_due_to_api_token.status_code = 403
    failed_response_due_to_api_token.json.side_effect = [failed_payload_due_to_api_token]

    failed_response_due_to_bad_request = mocker.Mock()
    failed_response_due_to_bad_request.status_code = 404
    failed_response_due_to_bad_request.json.side_effect = [{}]

    def mock_get(url: str):
        if not url.startswith("https://ipinfo.io/"):
            return failed_response_due_to_bad_request

        # the ip address and the api token must be delimited by '?token='
        parameters = url.lstrip("https://ipinfo.io/").split("?token=")
        if not len(parameters) == 2:
            return failed_response_due_to_bad_request

        ip_address, api_token = parameters

        # check validity of ip address
        if re.fullmatch(r"((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])", ip_address) is None:
            return failed_response_due_to_ip_address

        if api_token not in [valid_api_token, ""]:
            return failed_response_due_to_api_token

        if re.match(r"(127\.|192\.168\.|10\.|172\.1[6-9]\.|172\.2[0-9]\.|172\.3[0-1]\.)", ip_address) is not None:
            return successful_bogon_response

        return successful_non_bogon_response

    return mock_get, successful_bogon_response, failed_response_due_to_ip_address, failed_response_due_to_api_token, failed_response_due_to_bad_request


def test_api_token_validity(mocker, valid_api_token, invalid_api_token, mock_requests_get):
    mock_get, successful_bogon_response, failed_response_due_to_ip_address, failed_response_due_to_api_token, failed_response_due_to_bad_request = mock_requests_get
    mocker.patch("requests.get", mock_get)

    validate_api_token(valid_api_token)
    # the ipinfo API works even when no API token is provided
    validate_api_token("")

    with pytest.raises(ValueError) as exception_information:
        validate_api_token(invalid_api_token)
    assert str(exception_information.value) == "Invalid API token!"
