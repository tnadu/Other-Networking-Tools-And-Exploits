import pytest


from dns.DNS_controller import DNSController
# from dns.statistics import Statistics
# import dns.blacklists
# import dns.main_DNS
# import dns.simple_flask
# import dns.dns_settings

from scapy.layers.dns import IP, UDP, DNS, DNSQR, DNSRR


class TestDns():
    # Mocked packets for different send_request_authoritative_server scenarios
    valid_query_ip_address = '6.9.6.9'
    invalid_query_ip_address = '2.9.2.9'
    response_ip_address = '5.5.5.5'
    authoritative_ip = '1.1.1'
    
    @staticmethod
    def create_query_dns_packet(sought_ip_address, qtype = 1):
        """qtype: 1 = A, 2 = NS, 5 = CNAME, 15 = MX, 28 = AAAA, 99 = UNKNOWN"""
        DNSRR_query = DNSQR(qname = sought_ip_address, qtype = qtype, qclass = 1)
        DNS_packet = DNS(qd = DNSRR_query, rd = 1)
        return DNS_packet

    @staticmethod
    def create_dns_answer_packet(response_address, a_rr = True, ns_rr = False, cname_rr = False):
        """rr_type: 1 = A, 2 = NS, 5 = CNAME, 15 = MX, 28 = AAAA, 99 = UNKNOWN"""
        if a_rr:
            return DNS(an=DNSRR(rdata=response_address, type=1))
        if ns_rr:
            return DNS(ns=DNSRR(rdata=response_address, type=2), an=None)
        if cname_rr:
            return DNS(an=DNSRR(rdata=response_address, type=5))

    @staticmethod
    def create_packet(proxy_ip_address, dns_packet):
        return IP(dst=proxy_ip_address) / UDP(dport=53) / dns_packet
    
    @staticmethod
    @pytest.mark.parametrize('input_query_packet, sr1_mocks, root_server_mock, google_mock, expected_output', [
        # if 0 T F, then return None
        (None, [None], None, None, None),                               
        # if 0 F, if 1 F, if 2 F
        (create_query_dns_packet(valid_query_ip_address, 2), [create_dns_answer_packet(response_ip_address, ns_rr=True)],
         None, None, DNS(ns=DNSRR(rdata=response_ip_address, type=2), an=None)),
        # # if 0 F, if 1 F, if 2 T (with valid A rr from root server)
        # (create_query_dns_packet(valid_query_ip_address, 1) [create_dns_answer_packet(response_ip_address, cname_rr=True)], 
        #  create_dns_answer_packet(response_ip_address), None, DNS(an=DNSRR(rrname=response_ip_address, type=1))),
        # # the same as above, but with qtype=28
        # (create_query_dns_packet(valid_query_ip_address, 28) [create_dns_answer_packet(response_ip_address, cname_rr=True)], 
        #  create_dns_answer_packet(response_ip_address), None, DNS(an=DNSRR(rrname=response_ip_address, type=1))),        
        # # if 0 F, if 1 T, if 2 F
        # (create_query_dns_packet(valid_query_ip_address, 15), [create_dns_answer_packet(response_ip_address, ns_rr=True), create_dns_answer_packet(response_ip_address)], 
        #  None, create_dns_answer_packet(response_ip_address), DNS(an=DNSRR(rrname=response_ip_address, type=1))),
        # # if 0 F, if 1 T, if 2 T (with valid A rr from root server)
        # (create_query_dns_packet(valid_query_ip_address, 1), [create_dns_answer_packet(response_ip_address, ns_rr=True), create_dns_answer_packet(response_ip_address, cname_rr=True)],
        #   create_dns_answer_packet(response_ip_address), create_dns_answer_packet(response_ip_address), DNS(an=DNSRR(rrname=response_ip_address, type=1))),        
    ])
    def test_send_request_authoritative_server(
        mocker, 
        input_query_packet, 
        sr1_mocks, 
        root_server_mock, 
        google_mock, 
        expected_output):
            
        with mocker.patch('dns.DNS_controller.DNSController.send_receive', side_effect=[mock for mock in sr1_mocks]):
            with mocker.patch('dns.DNS_controller.DNSController.send_request_root_server', return_value = root_server_mock):
                with mocker.patch('dns.DNS_controller.DNSController.google_request', return_value = google_mock):                  
                    response = DNSController.send_request_authoritative_server(input_query_packet, TestDns.valid_query_ip_address)
        
        if response != expected_output:
            print('pula pula', response.an.show(), ' - ', expected_output.ns.show())
        
        assert response == expected_output
        
    @staticmethod
    def test_interpret_DNS_qtype():
        input: list = [1, 2, 5, 15, 28, 99]
        expected_output: list = ["A", "NS", "CNAME", "MX", "AAAA", "UNKNOWN"]
        assert all(DNSController.interpret_DNS_qtype(input[i]) == expected_output[i] for i in range(len(input)))