import pytest
from scapy.layers.dns import DNS, DNSQR, DNSRR


from dns.DNS_controller import DNSController


class TestDns():
    valid_query_domain = 'test.com'
    invalid_query_domain = 'ads1.com'
    invalid_query_domain2 = 'fb1.com'
    
    response_ip_address = '5.5.5.5'
    authoritative_ip = '1.1.1'
    
    @staticmethod
    def create_query_dns_packet(sought_ip_address, qtype = 1):
        """qtype: 1 = A, 2 = NS, 5 = CNAME, 15 = MX, 28 = AAAA, 99 = UNKNOWN"""
        DNSRR_query = DNSQR(qname = sought_ip_address, qtype = qtype, qclass = 1)
        DNS_packet = DNS(qd = DNSRR_query, rd = 1)
        return DNS_packet

    @staticmethod
    def create_dns_answer_packet(
        response_address,
        soa_rr = False,
        a_rr = True,
        ns_rr = False,
        cname_rr = False,
        error_code = False,
        ar_count = False):
        """rr_type: 1 = A, 2 = NS, 5 = CNAME, 15 = MX, 28 = AAAA, 99 = UNKNOWN"""
        if ar_count:
            return DNS(ar=DNSRR(rdata=response_address, type=1)/DNSRR(rdata=response_address, type=2), an=None)
        if error_code:
            return DNS(rcode=2)
        if ns_rr:
            rr_type = 6 if soa_rr else 2
            return DNS(ns=DNSRR(rdata=response_address, type=rr_type), an=None)
        if cname_rr:
            return DNS(an=DNSRR(rdata=response_address, type=5))
        if a_rr:
            return DNS(an=DNSRR(rdata=response_address, type=1))
        return None
    
    @staticmethod
    @pytest.mark.parametrize('input_query_packet, request_root_server_mock, expected_output', [
        # if 0 T, then get_ad_blocker_response
        (create_query_dns_packet(invalid_query_domain2), None, DNS(
            id = 0,
            qr = 1,
            aa = 0,
            rcode = 0,
            qd = DNSQR(qname = 'fb1.com', qtype = 1, qclass = 1),
            an = DNSRR(
                rrname = 'fb1.com',
                ttl = 500,
                type = 1,
                rclass = "IN",
                rdata = '0.0.0.0'
            )
        )),
        # if 0 T, then get_ad_blocker_response but 29 type
        (create_query_dns_packet(invalid_query_domain2, 28), None, DNS(
            id = 0,
            qr = 1,
            aa = 0,
            rcode = 0,
            qd = DNSQR(qname = 'fb1.com', qtype = 28, qclass = 1),
            an = DNSRR(
                rrname = 'fb1.com',
                ttl = 500,
                type = 28,
                rclass = "IN",
                rdata = '::'
            )
        )),
        # if 0 F if 1 T
        (create_query_dns_packet(valid_query_domain, 2), None, 
         DNS(id=0,qd=DNSQR(qname = 'test.com', qtype = 2, qclass = 1),qr=1,aa=0,rcode=2)),
        # F, F, T(inside if 0 T, if 1 F)
        (create_query_dns_packet(valid_query_domain, 2), create_dns_answer_packet(response_ip_address), 
         DNS(id=0,aa=0,qd=DNSQR(qname = 'test.com', qtype = 2, qclass = 1),an=DNSRR(rdata=response_ip_address, type=1))),
        # F, F, T(inside if 0 T, if 1 T)
        (create_query_dns_packet(valid_query_domain, 2), DNS(an=DNSRR(rdata=invalid_query_domain, type=15)), DNS(
            id = 0,
            aa = 0,
            qd = DNSQR(qname = valid_query_domain, qtype = 2, qclass = 1),
            an = DNSRR(
                type = 15,
                rclass = "IN",
                rdata = invalid_query_domain
            ))),
        # F, F, F (arcount)
        (create_query_dns_packet(valid_query_domain, 2), create_dns_answer_packet(response_ip_address, ns_rr=True),
         DNS(id=0,aa=0,qd=DNSQR(qname='test.com', qtype=2, qclass=1),ns=DNSRR(rdata='5.5.5.5', type=2), an=None)),
        # F, F, F (rcode !=0)
        (create_query_dns_packet(valid_query_domain, 2), create_dns_answer_packet(response_ip_address, error_code=True),
         DNS(id=0, aa=0,qd=DNSQR(qname='test.com', qtype=2, qclass=1),rcode=2)),       
    ])
    def test_multiple_records_lookup(
        mocker, 
        input_query_packet,
        request_root_server_mock,
        expected_output):
            
        with mocker.patch('dns.DNS_controller.DNSController.send_request_root_server', return_value = request_root_server_mock):                  
            response = DNSController.multiple_records_lookup(input_query_packet)
        
        if response != expected_output:
            print('pula pula', response, ' - ', expected_output)
        
        assert response == expected_output

    @staticmethod
    @pytest.mark.parametrize('input_query_packet, request_root_server_mock, expected_output', [
        # if 0 T, then get_ad_blocker_response
        (create_query_dns_packet(invalid_query_domain2), None, DNS(
            id = 0,
            qr = 1,
            aa = 0,
            rcode = 0,
            qd = DNSQR(qname = 'fb1.com', qtype = 1, qclass = 1),
            an = DNSRR(
                rrname = 'fb1.com',
                ttl = 500,
                type = 1,
                rclass = "IN",
                rdata = '0.0.0.0'
            )
        )),
        # if 0 T, then get_ad_blocker_response but 29 type
        (create_query_dns_packet(invalid_query_domain2, 28), None, DNS(
            id = 0,
            qr = 1,
            aa = 0,
            rcode = 0,
            qd = DNSQR(qname = 'fb1.com', qtype = 28, qclass = 1),
            an = DNSRR(
                rrname = 'fb1.com',
                ttl = 500,
                type = 28,
                rclass = "IN",
                rdata = '::'
            )
        )),
        # if 0 F if 1 T
        (create_query_dns_packet(valid_query_domain), create_dns_answer_packet(response_ip_address), DNS(id=0,qd=DNSQR(qname = 'test.com', qtype = 1, qclass = 1),an=DNSRR(rdata=response_ip_address, type=1))),
        # if 0 F if 1 F
        (create_query_dns_packet(valid_query_domain), None, DNS(id=0, qr=1, aa=0, rcode=2, qd=DNSQR(qname = 'test.com', qtype = 1, qclass = 1) ) )
    
    ])
    def test_single_record_lookup(
        mocker, 
        input_query_packet,
        request_root_server_mock,
        expected_output):
            
        with mocker.patch('dns.DNS_controller.DNSController.send_request_root_server', return_value = request_root_server_mock):                  
            response = DNSController.single_record_lookup(input_query_packet)
        
        if response != expected_output:
            print('pula pula', response, ' - ', expected_output)
        
        assert response == expected_output
    
    @staticmethod
    @pytest.mark.parametrize("""input_query_packet, 
        root_server_mock, sr1_mock, pick_random_responses, google_mock, tld_server_mock, expected_output""", [
        # if 0 T, then send_response_server_error
        (create_query_dns_packet(valid_query_domain),"192.36.148.17",None, [0], None, None, 
         DNS(id = 0,qr = 1,aa = 0,rcode = 2,qd = DNSQR(qname = valid_query_domain, qtype = 1, qclass = 1))), 
        # F, T, then root_response (ancount > 0)
        (create_query_dns_packet(valid_query_domain),"192.36.148.17", 
         create_dns_answer_packet(response_ip_address, error_code=True), [0], None, None, DNS(rcode=2)), 
        # F, F, T arcount > 1 (without while)
        (create_query_dns_packet(valid_query_domain),"192.36.148.17", 
         create_dns_answer_packet(response_ip_address, ar_count=True), [0], None, 
         create_dns_answer_packet(response_ip_address), DNS(an=DNSRR(rdata=response_ip_address, type=1))),
        # F, F, T arcount > 1 (inside while) 
        (create_query_dns_packet(valid_query_domain),"192.36.148.17", 
         create_dns_answer_packet(response_ip_address, ar_count=True), [1,0], None, 
         create_dns_answer_packet(response_ip_address), DNS(an=DNSRR(rdata=response_ip_address, type=1))),
        # F F F (inside else)
        (create_query_dns_packet(valid_query_domain),"192.36.148.17", 
         create_dns_answer_packet(response_ip_address, ns_rr=True), [0], 
         create_dns_answer_packet(response_ip_address),create_dns_answer_packet(response_ip_address), 
         DNS(an=DNSRR(rdata=response_ip_address, type=1))),   
    ])
    def test_send_request_root_server(
        mocker, 
        input_query_packet,
        root_server_mock, 
        sr1_mock, 
        pick_random_responses, 
        google_mock,
        tld_server_mock, 
        expected_output):
            
        with mocker.patch('dns.DNS_controller.DNSController.pick_random_response',
                          side_effect=[tld_reponse for tld_reponse in pick_random_responses]):
            with mocker.patch('dns.DNS_controller.DNSController.send_receive', return_value = sr1_mock):
                with mocker.patch('dns.DNS_controller.DNSController.google_request', return_value = google_mock):                  
                    with mocker.patch('dns.DNS_controller.DNSController.send_request_tld_server', return_value = tld_server_mock):                  
                        with mocker.patch('dns.DNS_controller.DNSController.pick_random_root_server',
                            return_value = root_server_mock):                  
                            response = DNSController.send_request_root_server(input_query_packet)
        
        assert response == expected_output
    
    @staticmethod
    @pytest.mark.parametrize("""input_query_packet,
        sr1_mock, pick_random_responses, google_mock, authoritative_server_mock, expected_output""", [
        # if 0 T, then send_response_server_error
        (create_query_dns_packet(valid_query_domain), None, [None], None, None,
         DNS(id = 0,qr = 1,aa = 0,rcode = 2,qd = DNSQR(qname = valid_query_domain, qtype = 1, qclass = 1))), 
        # F, T, then TLD_response (ancount > 0)
        (create_query_dns_packet(valid_query_domain), 
         create_dns_answer_packet(response_ip_address), [None], None, None, DNS(an=DNSRR(rdata=response_ip_address, type=1))), 
        # if 0 F, if 1 T, then TLD_response (rcode != 0)
        (create_query_dns_packet(valid_query_domain), 
         create_dns_answer_packet(None, error_code=True), [None], None, None, DNS(rcode=2)),                                                                     
        # F, F, T arcount > 1 (without while)
        (create_query_dns_packet(valid_query_domain), 
         create_dns_answer_packet(response_ip_address, ar_count=True), [0], None, 
         create_dns_answer_packet(response_ip_address), DNS(an=DNSRR(rdata=response_ip_address, type=1))),
        # F, F, T arcount > 1 (inside while) 
        (create_query_dns_packet(valid_query_domain), create_dns_answer_packet(response_ip_address, ar_count=True), 
         [1,0], None, create_dns_answer_packet(response_ip_address), DNS(an=DNSRR(rdata=response_ip_address, type=1))),
        # F F F (inside else: F F)
        (create_query_dns_packet(valid_query_domain), create_dns_answer_packet(response_ip_address, ns_rr=True),
         [0], create_dns_answer_packet(response_ip_address),create_dns_answer_packet(response_ip_address), 
         DNS(an=DNSRR(rdata=response_ip_address, type=1))),
        # F F F (inside else: T F)
        (create_query_dns_packet(valid_query_domain), create_dns_answer_packet(response_ip_address, ns_rr=True, soa_rr=True),
         [0], None, None, DNS(ns=DNSRR(rdata=response_ip_address, type=6), an=None)),
        # F F F (inside else: F T)
        (create_query_dns_packet(valid_query_domain), create_dns_answer_packet(response_ip_address, ns_rr=True), 
         [0], None, None, None),
    ])
    def test_send_request_tld_server(
        mocker, 
        input_query_packet, 
        sr1_mock, 
        pick_random_responses, 
        google_mock,
        authoritative_server_mock, 
        expected_output):
            
        with mocker.patch('dns.DNS_controller.DNSController.pick_random_response',
            side_effect=[tld_reponse for tld_reponse in pick_random_responses]):
            with mocker.patch('dns.DNS_controller.DNSController.send_receive', return_value = sr1_mock):
                with mocker.patch('dns.DNS_controller.DNSController.google_request', return_value = google_mock):                  
                    with mocker.patch('dns.DNS_controller.DNSController.send_request_authoritative_server',
                        return_value = authoritative_server_mock):                  
                        response = DNSController.send_request_tld_server(input_query_packet, TestDns.valid_query_domain)
        
        assert response == expected_output
    
    @staticmethod
    @pytest.mark.parametrize('input_query_packet, sr1_mocks, root_server_mock, google_mock, expected_output', [
        # if 0 T F, then return None
        (None, [None], None, None, None),                               
        # if 0 F, if 1 F, if 2 F
        (create_query_dns_packet(valid_query_domain, 2), [create_dns_answer_packet(response_ip_address, ns_rr=True)],
         None, None, DNS(ns=DNSRR(rdata=response_ip_address, type=2), an=None)),
        # if 0 F, if 1 F, if 2 T (with valid A rr from root server)
        (create_query_dns_packet(valid_query_domain, 1), [create_dns_answer_packet(response_ip_address, cname_rr=True)], 
         create_dns_answer_packet(response_ip_address), None, DNS(an=DNSRR(rdata=response_ip_address, type=1))),
        # the same as above, but with qtype=28
        (create_query_dns_packet(valid_query_domain, 28), [create_dns_answer_packet(response_ip_address, cname_rr=True)], 
         create_dns_answer_packet(response_ip_address), None, DNS(an=DNSRR(rdata=response_ip_address, type=1))),        
        # if 0 F, if 1 T, if 2 F
        (create_query_dns_packet(valid_query_domain, 15), 
         [create_dns_answer_packet(response_ip_address, ns_rr=True), create_dns_answer_packet(response_ip_address)], 
         None, create_dns_answer_packet(response_ip_address), DNS(an=DNSRR(rdata=response_ip_address, type=1))),
        # if 0 F, if 1 T, if 2 T (with valid A rr from root server)
        (create_query_dns_packet(valid_query_domain, 1),
         [create_dns_answer_packet(response_ip_address, ns_rr=True), create_dns_answer_packet(response_ip_address, cname_rr=True)],
          create_dns_answer_packet(response_ip_address), create_dns_answer_packet(response_ip_address),
          DNS(an=DNSRR(rdata=response_ip_address, type=1))),        
    ])
    def test_send_request_authoritative_server(
        mocker, 
        input_query_packet, 
        sr1_mocks, 
        root_server_mock, 
        google_mock, 
        expected_output):
            
        with mocker.patch('dns.DNS_controller.DNSController.send_receive', side_effect=[mock for mock in sr1_mocks]):
            with mocker.patch('dns.DNS_controller.DNSController.send_request_root_server', return_value = root_server_mock):
                with mocker.patch('dns.DNS_controller.DNSController.google_request', return_value = google_mock):                  
                    response = DNSController.send_request_authoritative_server(input_query_packet, TestDns.valid_query_domain)
        
        assert response == expected_output
        
    @staticmethod
    def test_interpret_DNS_qtype():
        input: list = [1, 2, 5, 15, 28, 99]
        expected_output: list = ["A", "NS", "CNAME", "MX", "AAAA", "UNKNOWN"]
        assert all(DNSController.interpret_DNS_qtype(input[i]) == expected_output[i] for i in range(len(input)))