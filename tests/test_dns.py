import pytest


from dns.DNS_controller import DNSController
# from dns.statistics import Statistics
# import dns.blacklists
# import dns.main_DNS
# import dns.simple_flask
# import dns.dns_settings

from scapy.layers.dns import IP, UDP, DNS, DNSQR, DNSRR


class TestDns():
    # Mocked packets for different send_request_authoritative_server scenarios
    valid_ip_address = '6.9.6.9'
    invalid_ip_address = '2.9.2.9'
    
    DNSRR_query = DNSQR(qname = '', qtype = 1, qclass = 1)
    DNS_packet = DNS(qd = DNSRR_query, rd = 1)
                
    authoritative_ip = '1.1.1'
    packet_with_ns = IP(dst=authoritative_ip) / UDP(dport=53) / DNS(ns=DNSRR(rrname=DNS_packet.qd.qname), an=None)
    packet_with_cname = IP(dst=authoritative_ip) / UDP(dport=53) / DNS(an=DNSRR(rrname=DNS_packet.qd.qname, type=5))
    valid_packet = IP(dst=authoritative_ip) / UDP(dport=53) / DNS(an=DNSRR(rrname=DNS_packet.qd.qname))

    @staticmethod
    def create_dns_packet(sought_ip_address, a_type = True, ns_type = False, cname_type = False):
        if a_type:
            return DNS(an=DNSRR(rrname=sought_ip_address, type=5))
        if ns_type:
            return DNS(ns=DNSRR(rrname=sought_ip_address))
        if cname_type:
            return DNS(an=DNSRR(rrname=sought_ip_address, type=5))

    @staticmethod
    def create_packet(proxy_ip_address, dns_packet):
        return IP(dst=proxy_ip_address) / UDP(dport=53) / dns_packet
    
    @pytest.mark.parametrize('input_packets, sr1_mock', [
        (create_dns_packet(valid_ip_address, ns_type=True)),
        (create_dns_packet(valid_ip_address, cname_type=True)),
        (create_dns_packet(valid_ip_address)),
        (create_dns_packet(invalid_ip_address, ns_type=True)),
        (create_dns_packet(invalid_ip_address, cname_type=True)),
        (create_dns_packet(invalid_ip_address))
    ])
    @staticmethod
    def test_send_request_authoritative_server(mocker, input_packets, sr1_mock):
        expected_output = [None, None, None, None, None, None]
            
        responses = []
        with mocker.patch('sr1') as mock_sr1:
            for index in range(len(input_packets)):  
                mock_sr1.return_value = sr1_mock[index]
                response = DNSController.send_request_authoritative_server(input_packets[index], TestDns.valid_ip_address)
                responses.append(response)
        
        assert responses == expected_output
        
    @staticmethod
    def test_interpret_DNS_qtype():
        input: list = [1, 2, 5, 15, 28, 99]
        expected_output: list = ["A", "NS", "CNAME", "MX", "AAAA", "UNKNOWN"]
        assert all(DNSController.interpret_DNS_qtype(input[i]) == expected_output[i] for i in range(len(input)))