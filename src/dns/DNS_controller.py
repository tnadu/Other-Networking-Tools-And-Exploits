import random
from random import randrange
from scapy.all import *
from scapy.layers.dns import IP, UDP, DNS, DNSQR, DNSRR


from dns import dns_settings


class DNSController:
    @staticmethod
    def google_request(DNS_packet, timeout = 20):
        return sr1( # pragma: no cover
            IP(dst = dns_settings.GOOGLE_DNS_IP) /
            UDP(dport = dns_settings.UDP_PORT) /
            DNS_packet, verbose = 0, timeout = timeout)

    @staticmethod
    def send_receive(proxy_ip_address, DNS_packet):
        return sr1( # pragma: no cover
            IP(dst = proxy_ip_address) / 
            UDP(dport = dns_settings.UDP_PORT) /
            DNS_packet, verbose = 0, timeout = 2)

    @staticmethod
    def send_response_server_error(DNS_packet):
        """Sent when an error occurs"""
        DNS_error_response = DNS(
            id = DNS_packet[DNS].id,
            qr = 1,
            aa = 0,
            rcode = 2,
            qd = DNS_packet.qd
        )
        
        return DNS_error_response

    @staticmethod
    def pick_random_root_server():
        return random.choice(dns_settings.ROOT_SERVERS_IP) # pragma: no cover

    @staticmethod
    def pick_random_response(options):
        return randrange(options) # pragma: no cover

    @staticmethod
    def send_request_root_server(DNS_packet):
        """
        Sends a DNS request packet to a randomly chosen root server.    
        If successful, returns a response from the root server or a response from a TLD server if necessary.
        If unsuccessful, returns a server error response.
        """
        root_server_ip = DNSController.pick_random_root_server()
        # root servers do not offer recursivity
        DNS_packet.rd = 0
        
        root_response = DNSController.send_receive(root_server_ip, DNS_packet)
        
        if not root_response:
            return DNSController.send_response_server_error(DNS_packet)

        if root_response[DNS].rcode != 0:
            return root_response

        # Ensure there are at least 2 additional responses, as there might be only one, 
        # possibly of type OPT, which contains additional information
        if root_response.arcount > 1:
            ar_cnt = DNSController.pick_random_response(root_response.arcount)

            while root_response.ar[ar_cnt].type != 1:
                ar_cnt = DNSController.pick_random_response(root_response.arcount)

            response = root_response.ar[ar_cnt]

        else:
            # If there are no additional answers, we need to search for the 
            # name of an NS (authority section) that knows how to handle this request.
            ns_cnt = DNSController.pick_random_response(root_response.nscount)
            response = root_response.ns[ns_cnt]

            # ask google to get the address of the desired NS record 
            DNSRR_auth_query = DNSQR(qname = response.rdata, qtype = 1, qclass = 1)
            DNS_packet = DNS(qd = DNSRR_auth_query, rd = 1)
            DNSRR_auth_IP = DNSController.google_request(DNS_packet, timeout = 2)
            response = DNSRR_auth_IP[DNS].an

        return DNSController.send_request_tld_server(DNS_packet, response.rdata)        

    @staticmethod
    def send_request_tld_server(DNS_packet, TLD_ip):
        """
        Sends a DNS request packet to the Top-Level Domain (TLD) server.
        If successful, returns a response from the TLD server or a response from an authoritative server if necessary.
        If unsuccessful, returns a server error response.
        """
        TLD_response = DNSController.send_receive(TLD_ip, DNS_packet)
        
        if not TLD_response:
            return DNSController.send_response_server_error(DNS_packet)
        
        if TLD_response.ancount > 0 or TLD_response[DNS].rcode != 0:
            return TLD_response

        if TLD_response.arcount > 1:
            ar_cnt = DNSController.pick_random_response(TLD_response.arcount)

            while TLD_response.ar[ar_cnt].type != 1:
                ar_cnt = DNSController.pick_random_response(TLD_response.arcount)

            response = TLD_response.ar[ar_cnt]
        else:
            # If there are no additional answers, search for the name of an NS (authority section) that knows how to handle this request
            ns_cnt = DNSController.pick_random_response(TLD_response.nscount)
            DNSRR_auth = TLD_response.ns[ns_cnt]

            # If we receive a record of type SOA, it means that the request was not fulfilled, so we need to return this response
            if DNSRR_auth.type == 6:
                return TLD_response

            # A request to the Google server which will return the desired NS
            DNSRR_auth_query = DNSQR(qname = DNSRR_auth.rdata, qtype = 1, qclass = 1)
            DNS_packet = DNS(qd = DNSRR_auth_query, rd = 1)
            DNSRR_auth_IP = DNSController.google_request(DNS_packet, timeout = 2)

            if not DNSRR_auth_IP:
                return DNSRR_auth_IP

            response = DNSRR_auth_IP[DNS].an

        # Forward the request to the authoritative server
        return DNSController.send_request_authoritative_server(DNS_packet, response.rdata)

    @staticmethod
    def send_request_authoritative_server(DNS_packet, authoritative_ip):
        """
        Sends a DNS request packet to the authoritative server.
        If successful, returns a response from the authoritative server.
        If unsuccessful, returns None.
        """
        authoritative_response = DNSController.send_receive(authoritative_ip, DNS_packet)

        if not authoritative_response:
            return None
    
        # Need to search in one of the received NS for the queried domain unless a NS request and no answers exist
        if DNS_packet.qd.qtype != 2 and authoritative_response.nscount > 0 and authoritative_response.an is None:
            # While the authority returns NS and not A, we ask Google for the address of the NS and then ask further at the NS address
            while authoritative_response and authoritative_response.nscount > 0 and authoritative_response.ns.type == 2 and authoritative_response.an is None:
    
                DNSRR_auth_query = DNSQR(qname = authoritative_response.ns.rdata, qtype = 1, qclass = 1)
                DNS_packet = DNS(qd = DNSRR_auth_query, rd = 1)
                authoritative_response = DNSController.google_request(DNS_packet, timeout = 2)
                # To find the IP of the domain, send a request to the NS server we found in the previous step
                authoritative_response = DNSController.send_receive(authoritative_response.an.rdata, DNS_packet[DNS])
                
        # If the request is of type A / AAAA and the received record is CNAME then 
        # send a request to our server to return the IP address for that CNAME
        if (DNS_packet.qd.qtype == 1 or DNS_packet.qd.qtype == 28) and authoritative_response.an and authoritative_response.an.type == 5:
            DNS_req = DNS()
            DNS_req_qd = DNSQR(qname=authoritative_response.an.rdata, qtype=DNS_packet.qd.qtype, qclass=1)
            DNS_req.qd = DNS_req_qd

            return DNSController.send_request_root_server(DNS_req)
        
        return authoritative_response

    @staticmethod
    def filter_dns_answer(response, DNS_packet):
        DNS_response = response[DNS]
        DNS_response.id = DNS_packet[DNS].id    # answer's ID needs to be the same as the initial request from our server
        DNS_response.aa = 0                     # can't say we are authoritative answer
        DNS_response.qd = DNS_packet.qd         # answer's query needs to be the same as the initial request from our server
        return DNS_response

    @staticmethod
    def single_record_lookup(DNS_packet):
        domain_requested = DNS_packet.qd.qname.decode()[:-1]

        if domain_requested in dns_settings.ADSERVERS or domain_requested in dns_settings.FACEBOOK:
            return DNSController.get_ad_blocker_response(DNS_packet)

        response = DNSController.send_request_root_server(DNS_packet)

        return DNSController.filter_dns_answer(response, DNS_packet) if response else DNSController.send_response_server_error(DNS_packet)

    @staticmethod
    def multiple_records_lookup(DNS_packet):
        domain_requested = DNS_packet.qd.qname.decode()[:-1]
        
        if domain_requested in dns_settings.ADSERVERS or domain_requested in dns_settings.FACEBOOK:
            return DNSController.get_ad_blocker_response(DNS_packet)
        
        response = DNSController.send_request_root_server(DNS_packet)
        if not response:
            return DNSController.send_response_server_error(DNS_packet)

        DNS_response = DNSController.filter_dns_answer(response, DNS_packet)
        if DNS_response.rcode == 0 and DNS_response.ancount > 0:
            for answer in range(DNS_response.ancount):
                NS_domain = DNS_response.an[answer].rdata if DNS_packet.qd.qtype == 2 else DNS_response.an[answer].exchange.decode()[:-1]
                print('PULA PULA NS_domain', NS_domain)
                if NS_domain in dns_settings.ADSERVERS or NS_domain in dns_settings.FACEBOOK:
                    return DNSController.get_ad_blocker_response(DNS_packet)

        return DNS_response
    
    @staticmethod
    def interpret_DNS_qtype(type):
        match type:
            case 1:
                return "A"
            case 2:
                return "NS"
            case 5:
                return "CNAME"
            case 15:
                return "MX"
            case 28:
                return "AAAA"
            case _:
                return "UNKNOWN"

    @staticmethod
    def get_ad_blocker_response(DNS_packet):
        rdata_addresss = "0.0.0.0" if DNS_packet.qd.qtype != 28 else "::"

        DNS_answer = DNSRR(
            rrname = DNS_packet[DNS].qd.qname,
            ttl = 500,
            type = DNS_packet[DNS].qd.qtype,
            rclass = "IN",
            rdata = rdata_addresss
        )
        
        DNS_response = DNS(
            id = DNS_packet[DNS].id,
            qr = 1,
            aa = 0,
            rcode = 0,
            qd = DNS_packet.qd,
            an = DNS_answer
        )
        return DNS_response

    @staticmethod
    def display_DNS_query(DNS_packet): # pragma: no cover
        domain_requested = DNS_packet.qd.qname.decode()[:-1]
        record_type = DNSController.interpret_DNS_qtype(DNS_packet.qd.qtype)

        print("=========================")
        print("DNS request")
        print("=========================")
        print(f"| Request ID: {DNS_packet.id}")
        print(f"| Domain: {domain_requested}")
        print(f"| Record type: {record_type}")
        print("=========================")
        print()

    @staticmethod
    def display_DNS_response(DNS_packet): # pragma: no cover
        print("=========================")
        print("DNS response")
        print("=========================")
        print(f"| Request ID: {DNS_packet.id}")
        print(f"| QR: {DNS_packet.qr}")
        print(f"| Operation code: {DNS_packet.opcode}")
        print(f"| Response code: {DNS_packet.rcode}")
        print(f"| QDcount: {DNS_packet.qdcount}")
        print(f"| ANcount: {DNS_packet.ancount}")
        print(f"| NScount: {DNS_packet.nscount}")
        print(f"| ARcount: {DNS_packet.arcount}")
            
        print("-------------------------")
        print("|| Questions: ")
        print("-------------------------")
        if DNS_packet.qd:
            DNS_packet.qd.show()

        print("-------------------------")
        print("|| Answers: ")
        print("-------------------------")
        if DNS_packet.an:
            DNS_packet.an.show()

        print("-------------------------")
        print("|| Authority: ")
        print("-------------------------")
        if DNS_packet.ns:
            DNS_packet.ns.show()

        print("-------------------------")
        print("|| Additional: ")
        print("-------------------------")
        if DNS_packet.ar:
            DNS_packet.ar.show()
        
        print("=========================")
        print()