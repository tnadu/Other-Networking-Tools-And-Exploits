import random
from random import randrange
from scapy.all import *
from scapy.layers.dns import IP, UDP, DNS, DNSQR, DNSRR


from dns import dns_settings


class DNSController:
    @staticmethod # pragma: no mutate
    def google_request(DNS_packet, timeout = 20):   # pragma: no mutate
        return sr1( # pragma: no cover
            IP(dst = dns_settings.GOOGLE_DNS_IP)    # pragma: no mutate
            /                                       # pragma: no mutate
            UDP(dport = dns_settings.UDP_PORT)      # pragma: no mutate 
            /                                       # pragma: no mutate
            DNS_packet,                             # pragma: no mutate 
            verbose = 0,                            # pragma: no mutate
            timeout = timeout
        )

    @staticmethod # pragma: no mutate
    def send_receive(proxy_ip_address, DNS_packet): # pragma: no mutate
        return sr1( # pragma: no cover
            IP(dst = proxy_ip_address)          # pragma: no mutate 
            /                                   # pragma: no mutate
            UDP(dport = dns_settings.UDP_PORT)  # pragma: no mutate
            /                                   # pragma: no mutate
            DNS_packet,                         # pragma: no mutate
            verbose = 0,                        # pragma: no mutate
            timeout = 2
        )

    @staticmethod # pragma: no mutate
    def send_response_server_error(DNS_packet): # pragma: no mutate
        """Sent when an error occurs"""
        DNS_error_response = DNS(       # pragma: no mutate
            id = DNS_packet[DNS].id,    # pragma: no mutate
            qr = 1,                     # pragma: no mutate
            aa = 0,                     # pragma: no mutate
            rcode = 2,                  # pragma: no mutate
            qd = DNS_packet.qd          # pragma: no mutate
        ) 
        
        return DNS_error_response      

    @staticmethod # pragma: no mutate
    def pick_random_root_server(): # pragma: no mutate
        return random.choice(dns_settings.ROOT_SERVERS_IP) # pragma: no cover, no mutate

    @staticmethod # pragma: no mutate
    def pick_random_response(options): # pragma: no mutate
        return randrange(options) # pragma: no cover, no mutate

    @staticmethod # pragma: no mutate
    def send_request_root_server(DNS_packet): # pragma: no mutate
        """
        Sends a DNS request packet to a randomly chosen root server.    
        If successful, returns a response from the root server or a response from a TLD server if necessary.
        If unsuccessful, returns a server error response.
        """
        root_server_ip = DNSController.pick_random_root_server()                        # pragma: no mutate
        # root servers do not offer recursivity
        DNS_packet.rd = 0                                                               # pragma: no mutate
        
        root_response = DNSController.send_receive(root_server_ip, DNS_packet)          
        
        if not root_response:
            return DNSController.send_response_server_error(DNS_packet)

        if root_response[DNS].rcode != 0:
            return root_response

        # Ensure there are at least 2 additional responses, as there might be only one, 
        # possibly of type OPT, which contains additional information
        if root_response.arcount > 1:
            ar_cnt = DNSController.pick_random_response(root_response.arcount)          # pragma: no mutate

            while root_response.ar[ar_cnt].type != 1:
                ar_cnt = DNSController.pick_random_response(root_response.arcount)      # pragma: no mutate

            response = root_response.ar[ar_cnt]
        else:
            # If there are no additional answers, we need to search for the 
            # name of an NS (authority section) that knows how to handle this request.
            ns_cnt = DNSController.pick_random_response(root_response.nscount)          # pragma: no mutate
            response = root_response.ns[ns_cnt]                                         # pragma: no mutate

            # ask google to get the address of the desired NS record 
            DNSRR_auth_query = DNSQR(qname = response.rdata, qtype = 1, qclass = 1)     # pragma: no mutate
            DNS_packet = DNS(qd = DNSRR_auth_query, rd = 1)                             # pragma: no mutate
            DNSRR_auth_IP = DNSController.google_request(DNS_packet, timeout = 2)       # pragma: no mutate
            
            response = DNSRR_auth_IP[DNS].an                                            # pragma: no mutate

        return DNSController.send_request_tld_server(DNS_packet, response.rdata)        # pragma: no mutate

    @staticmethod # pragma: no mutate
    def send_request_tld_server(DNS_packet, TLD_ip): # pragma: no mutate
        """
        Sends a DNS request packet to the Top-Level Domain (TLD) server.
        If successful, returns a response from the TLD server or a response from an authoritative server if necessary.
        If unsuccessful, returns a server error response.
        """
        TLD_response = DNSController.send_receive(TLD_ip, DNS_packet)
        
        if not TLD_response:
            return DNSController.send_response_server_error(DNS_packet)
        
        if TLD_response.ancount > 0 or TLD_response[DNS].rcode != 0:
            return TLD_response

        if TLD_response.arcount > 1:
            ar_cnt = DNSController.pick_random_response(TLD_response.arcount)       # pragma: no mutate

            while TLD_response.ar[ar_cnt].type != 1:
                ar_cnt = DNSController.pick_random_response(TLD_response.arcount)   # pragma: no mutate

            response = TLD_response.ar[ar_cnt]  # pragma: no mutate
        else:
            # If there are no additional answers, search for the name of an NS (authority section) that knows how to handle this request
            ns_cnt = DNSController.pick_random_response(TLD_response.nscount)       # pragma: no mutate
            DNSRR_auth = TLD_response.ns[ns_cnt]

            # If we receive a record of type SOA, it means that the request was not fulfilled, so we need to return this response
            if DNSRR_auth.type == 6:
                return TLD_response

            # A request to the Google server which will return the desired NS
            DNSRR_auth_query = DNSQR(qname = DNSRR_auth.rdata, qtype = 1, qclass = 1)   # pragma: no mutate
            DNS_packet = DNS(qd = DNSRR_auth_query, rd = 1)                             # pragma: no mutate
            DNSRR_auth_IP = DNSController.google_request(DNS_packet, timeout = 2)       # pragma: no mutate

            if not DNSRR_auth_IP:
                return DNSRR_auth_IP

            response = DNSRR_auth_IP[DNS].an    # pragma: no mutate

        # Forward the request to the authoritative server
        return DNSController.send_request_authoritative_server(DNS_packet, response.rdata)

    @staticmethod # pragma: no mutate
    def send_request_authoritative_server(DNS_packet, authoritative_ip): # pragma: no mutate
        """
        Sends a DNS request packet to the authoritative server.
        If successful, returns a response from the authoritative server.
        If unsuccessful, returns None.
        """
        authoritative_response = DNSController.send_receive(authoritative_ip, DNS_packet)

        if not authoritative_response:
            return None
    
        # Need to search in one of the received NS for the queried domain unless a NS request and no answers exist
        if DNS_packet.qd.qtype != 2 and authoritative_response.nscount > 0 and authoritative_response.an is None:
            # While the authority returns NS and not A, we ask Google for the address of the NS and then ask further at the NS address
            while authoritative_response and authoritative_response.nscount > 0 and authoritative_response.ns.type == 2 and authoritative_response.an is None:
    
                DNSRR_auth_query = DNSQR(qname = authoritative_response.ns.rdata, qtype = 1, qclass = 1)    # pragma: no mutate
                DNS_packet = DNS(qd = DNSRR_auth_query, rd = 1)                                             # pragma: no mutate
                authoritative_response = DNSController.google_request(DNS_packet, timeout = 2)              # pragma: no mutate
                
                # To find the IP of the domain, send a request to the NS server 
                # we found in the previous step
                authoritative_response = DNSController.send_receive(authoritative_response.an.rdata, DNS_packet[DNS])
                
        # If the request is of type A / AAAA and the received record is CNAME then 
        # send a request to our server to return the IP address for that CNAME
        if (DNS_packet.qd.qtype == 1 or DNS_packet.qd.qtype == 28) and authoritative_response.an and authoritative_response.an.type == 5:
            DNS_req = DNS()                                                                                 # pragma: no mutate
            DNS_req_qd = DNSQR(qname=authoritative_response.an.rdata, qtype=DNS_packet.qd.qtype, qclass=1)  # pragma: no mutate
            DNS_req.qd = DNS_req_qd                                                                         # pragma: no mutate

            return DNSController.send_request_root_server(DNS_req)
        
        return authoritative_response

    @staticmethod # pragma: no mutate
    def filter_dns_answer(response, DNS_packet):    # pragma: no mutate
        DNS_response = response[DNS]                # pragma: no mutate
        # answer's ID needs to be the same as the initial request from our server
        DNS_response.id = DNS_packet[DNS].id        # pragma: no mutate
        # can't say we are authoritative answer
        DNS_response.aa = 0                         # pragma: no mutate
        # answer's query needs to be the same as the initial request from our server
        DNS_response.qd = DNS_packet.qd             # pragma: no mutate
        return DNS_response

    @staticmethod # pragma: no mutate
    def single_record_lookup(DNS_packet): # pragma: no mutate
        domain_requested = DNS_packet.qd.qname.decode()[:-1] 

        if domain_requested in dns_settings.ADSERVERS or domain_requested in dns_settings.FACEBOOK:
            return DNSController.get_ad_blocker_response(DNS_packet) 

        response = DNSController.send_request_root_server(DNS_packet) 

        return DNSController.filter_dns_answer(response, DNS_packet) if response else DNSController.send_response_server_error(DNS_packet) 

    @staticmethod # pragma: no mutate
    def multiple_records_lookup(DNS_packet): # pragma: no mutate
        domain_requested = DNS_packet.qd.qname.decode()[:-1] # pragma: no mutate
        
        if domain_requested in dns_settings.ADSERVERS or domain_requested in dns_settings.FACEBOOK: 
            return DNSController.get_ad_blocker_response(DNS_packet) # pragma: no mutate
        
        response = DNSController.send_request_root_server(DNS_packet) # pragma: no mutate
        
        if not response: 
            return DNSController.send_response_server_error(DNS_packet) # pragma: no mutate

        DNS_response = DNSController.filter_dns_answer(response, DNS_packet) # pragma: no mutate
        
        if DNS_response.rcode == 0 and DNS_response.ancount > 0:
            
            for answer in range(DNS_response.ancount): # pragma: no mutate
                NS_domain = DNS_response.an[answer].rdata if DNS_packet.qd.qtype == 2 else DNS_response.an[answer].exchange.decode()[:-1] # pragma: no mutate
                
                if NS_domain in dns_settings.ADSERVERS or NS_domain in dns_settings.FACEBOOK: # pragma: no mutate
                    return DNSController.get_ad_blocker_response(DNS_packet) # pragma: no mutate

        return DNS_response
    
    @staticmethod # pragma: no mutate
    def interpret_DNS_qtype(type): # pragma: no mutate
        if type == 1:   
            return "A"
        elif type == 2:
            return "NS"
        elif type == 5:
            return "CNAME"
        elif type == 15:
            return "MX"
        elif type == 28:
            return "AAAA"
        else:
            return "UNKNOWN"

    @staticmethod # pragma: no mutate
    def get_ad_blocker_response(DNS_packet):    # pragma: no mutate
        rdata_addresss = "0.0.0.0" if DNS_packet.qd.qtype != 28 else "::" # pragma: no mutate

        DNS_answer = DNSRR(
            rrname = DNS_packet[DNS].qd.qname,  
            ttl = 500,                          # pragma: no mutate
            type = DNS_packet[DNS].qd.qtype,    
            rclass = "IN",                      # pragma: no mutate
            rdata = rdata_addresss              # pragma: no mutate
        )
        
        DNS_response = DNS(
            id = DNS_packet[DNS].id,            
            qr = 1,                             # pragma: no mutate
            aa = 0,                             # pragma: no mutate
            rcode = 0,                          # pragma: no mutate
            qd = DNS_packet.qd,                 
            an = DNS_answer                     # pragma: no mutate
        )
        return DNS_response                     # pragma: no mutate

    @staticmethod # pragma: no mutate
    def display_DNS_query(DNS_packet): # pragma: no cover, no mutate
        domain_requested = DNS_packet.qd.qname.decode()[:-1] # pragma: no mutate
        record_type = DNSController.interpret_DNS_qtype(DNS_packet.qd.qtype) # pragma: no mutate

        print("=========================")      # pragma: no mutate
        print("DNS request")                    # pragma: no mutate
        print("=========================")      # pragma: no mutate
        print(f"| Request ID: {DNS_packet.id}") # pragma: no mutate
        print(f"| Domain: {domain_requested}")  # pragma: no mutate
        print(f"| Record type: {record_type}")  # pragma: no mutate
        print("=========================")      # pragma: no mutate
        print()                                 # pragma: no mutate

    @staticmethod # pragma: no mutate
    def display_DNS_response(DNS_packet): # pragma: no cover, no mutate
        print("=========================")              # pragma: no mutate
        print("DNS response")                           # pragma: no mutate
        print("=========================")              # pragma: no mutate
        print(f"| Request ID: {DNS_packet.id}")         # pragma: no mutate
        print(f"| QR: {DNS_packet.qr}")                 # pragma: no mutate
        print(f"| Operation code: {DNS_packet.opcode}") # pragma: no mutate
        print(f"| Response code: {DNS_packet.rcode}")   # pragma: no mutate
        print(f"| QDcount: {DNS_packet.qdcount}")       # pragma: no mutate
        print(f"| ANcount: {DNS_packet.ancount}")       # pragma: no mutate
        print(f"| NScount: {DNS_packet.nscount}")       # pragma: no mutate
        print(f"| ARcount: {DNS_packet.arcount}")       # pragma: no mutate
            
        print("-------------------------")              # pragma: no mutate
        print("|| Questions: ")                         # pragma: no mutate
        print("-------------------------")              # pragma: no mutate
        if DNS_packet.qd:                               # pragma: no mutate
            DNS_packet.qd.show()                        # pragma: no mutate

        print("-------------------------")              # pragma: no mutate
        print("|| Answers: ")                           # pragma: no mutate
        print("-------------------------")              # pragma: no mutate
        if DNS_packet.an:                               # pragma: no mutate
            DNS_packet.an.show()                        # pragma: no mutate

        print("-------------------------")              # pragma: no mutate
        print("|| Authority: ")                         # pragma: no mutate
        print("-------------------------")              # pragma: no mutate
        if DNS_packet.ns:                               # pragma: no mutate
            DNS_packet.ns.show()                        # pragma: no mutate

        print("-------------------------")              # pragma: no mutate
        print("|| Additional: ")                        # pragma: no mutate
        print("-------------------------")              # pragma: no mutate
        if DNS_packet.ar:                               # pragma: no mutate
            DNS_packet.ar.show()                        # pragma: no mutate
        
        print("=========================")              # pragma: no mutate
        print()                                         # pragma: no mutate